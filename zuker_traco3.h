void zuker_traco3()
{



    int c0,c1,c2,c3,c4,c5,c6,c7,c8,c9,c11,c10,c12,c13,c14,c15;
// tstile
if(1==1)

for( c0 = 0; c0 <= floord(N - 2, 8); c0 += 1)
  #pragma omp parallel for schedule(dynamic, 1) shared(c0) private(c1,c2,c3,c4,c5,c6,c7,c8,c9,c11,c10,c12,c13,c14,c15)
  for( c1 = (c0 + 1) / 2; c1 <= min(c0, (N - 1) / 16); c1 += 1)
    for( c3 = 16 * c0 - 16 * c1 + 1; c3 <= min(min(N - 1, 16 * c1 + 15), 16 * c0 - 16 * c1 + 16); c3 += 1)
      for( c4 = max(0, -c1 + (N + 1) / 16 - 1); c4 <= min((N - 1) / 16, -c1 + (N + c3 - 1) / 16); c4 += 1)
        for( c6 = max(max(-N + 16 * c1 + 1, -N + c3 + 1), -16 * c4 - 14); c6 <= min(min(0, -N + 16 * c1 + 16), c3 - 16 * c4); c6 += 1) {
          if (c3 >= 2 && 2 * c3 >= 16 * c4 + c6 + 3) {
            if (c3 >= 4 && c3 >= 16 * c4 + c6 + 1) {
              if (16 * c4 + c6 + 1 == c3)
                V[(-c3+16*c4+1)][(16*c4+1)] = MIN(W[(-c3+16*c4+1)+1][(-c3+16*c4+2)] + W[(-c3+16*c4+2)+1][(16*c4+1)-1], V[(-c3+16*c4+1)][(16*c4+1)]);
              for( c10 = max(-c3 + 16 * c4 + 3, -c6 + 1); c10 <= min(16 * c4 + 14, c3 - c6 - 2); c10 += 1) {
                for( c12 = max(16 * c4, c10 + 1); c12 <= min(min(16 * c4 + 15, c3 - c6 - 1), c3 + c10 - 3); c12 += 1)
                  V[(-c6)][(c3-c6)] = MIN(V[c10][c12] + EFL[(-c6)][(c3-c6)], V[(-c6)][(c3-c6)]);
                if (c10 >= 16 * c4)
                  W[(-c6)][(c3-c6)] += MIN ( MIN(W[(-c6)][c10], W[c10+1][(c3-c6)]), W[(-c6)][(c3-c6)]);
                if (16 * c4 + c6 + 15 >= c3)
                  V[(-c6)][(c3-c6)] = MIN(W[(-c6)+1][c10] + W[c10+1][(c3-c6)-1], V[(-c6)][(c3-c6)]);
              }
              if (16 * c4 + c6 + 15 >= c3) {
                W[(-c6)][(c3-c6)] += MIN ( MIN(W[(-c6)][(c3-c6-1)], W[(c3-c6-1)+1][(c3-c6)]), W[(-c6)][(c3-c6)]);
              } else {
                W[(-c6)][(c3-c6)] += MIN ( MIN(W[(-c6)][(16*c4+15)], W[(16*c4+15)+1][(c3-c6)]), W[(-c6)][(c3-c6)]);
              }
            } else if (c1 == c0 && c3 <= 3) {
              if (c3 == 3 && 16 * c4 + c6 >= 2)
                V[(-c6)][(-c6+3)] = MIN(W[(-c6)+1][(-c6+1)] + W[(-c6+1)+1][(-c6+3)-1], V[(-c6)][(-c6+3)]);
              for( c10 = max(16 * c4, -c6 + 1); c10 <= min(16 * c4 + 15, c3 - c6 - 1); c10 += 1) {
                W[(-c6)][(c3-c6)] += MIN ( MIN(W[(-c6)][c10], W[c10+1][(c3-c6)]), W[(-c6)][(c3-c6)]);
                if (c3 == 3 && 16 * c4 + c6 >= -12 && c6 + c10 == 1)
                  V[(-c6)][(-c6+3)] = MIN(W[(-c6)+1][(-c6+1)] + W[(-c6+1)+1][(-c6+3)-1], V[(-c6)][(-c6+3)]);
              }
            } else {
              for( c10 = -c3 + 16 * c4 + 1; c10 < 16 * c4 - 1; c10 += 1)
                V[(-c3+16*c4)][16*c4] = MIN(W[(-c3+16*c4)+1][c10] + W[c10+1][16*c4-1], V[(-c3+16*c4)][16*c4]);
            }
          }
          if (16 * c4 + c6 + 15 >= c3) {
            V[(-c6)][(c3-c6)] = MIN( MIN (V[(-c6)+1][(c3-c6)-1], EHF[(-c6)][(c3-c6)]), V[(-c6)][(c3-c6)]);
            W[(-c6)][(c3-c6)] = MIN( MIN ( MIN ( W[(-c6)+1][(c3-c6)], W[(-c6)][(c3-c6)-1]), V[(-c6)][(c3-c6)]), W[(-c6)][(c3-c6)]);
          }
        }


















    if(1==0)
        for( c0 = 0; c0 <= floord(N - 2, 8); c0 += 1)
            #pragma omp parallel for schedule(dynamic, 1)
            for( c1 = (c0 + 1) / 2; c1 <= min(c0, (N - 1) / 16); c1 += 1)
                for( c3 = 16 * c0 - 16 * c1 + 1; c3 <= min(min(N - 1, 16 * c1 + 15), 16 * c0 - 16 * c1 + 16); c3 += 1)
                {
                    if (c3 >= 3 && (c3 % 16) + N >= 16 * c1 + c3 + 31)
                    {
                        for( c6 = max(-N + 16 * c1 + 1, -N + c3 + 1); c6 <= -N + 16 * c1 + 16; c6 += 1)
                            for( c10 = -c6 + 1; c10 < c3 - c6; c10 += 1)
                                W[(-c6)][(c3-c6)] += MIN ( MIN(W[(-c6)][c10], W[c10+1][(c3-c6)]), W[(-c6)][(c3-c6)]);
                    }
                    else if (N >= 16 * c0 + 30 && c1 == c0 && c3 == 2)
                        for( c6 = max(-N + 3, -N + 16 * c0 + 1); c6 <= -N + 16 * c0 + 16; c6 += 1)
                            W[(-c6)][(-c6+2)] += MIN ( MIN(W[(-c6)][(-c6+1)], W[(-c6+1)+1][(-c6+2)]), W[(-c6)][(-c6+2)]);
                    if (c3 >= 3)
                    {
                        for( c4 = max(0, -c1 + (N + 1) / 16 - 1); c4 < -c1 + (N + c3) / 16 - 1; c4 += 1)
                        {
                            if (c3 >= 16 * c4 && 16 * c4 + 15 >= c3)
                                for( c6 = max(-N + 16 * c1 + 1, -N + c3 + 1); c6 < -16 * c4 - 14; c6 += 1)
                                    for( c10 = -c6 + 1; c10 < c3 - c6; c10 += 1)
                                        W[(-c6)][(c3-c6)] += MIN ( MIN(W[(-c6)][c10], W[c10+1][(c3-c6)]), W[(-c6)][(c3-c6)]);
                            for( c6 = max(max(-N + 16 * c1 + 1, -N + c3 + 1), -16 * c4 - 14); c6 <= min(0, -N + 16 * c1 + 16); c6 += 1)
                            {
                                if (c3 >= 16 * c4 && 16 * c4 + 15 >= c3)
                                    for( c10 = -c6 + 1; c10 < 16 * c4; c10 += 1)
                                        W[(-c6)][(c3-c6)] += MIN ( MIN(W[(-c6)][c10], W[c10+1][(c3-c6)]), W[(-c6)][(c3-c6)]);
                                for( c10 = max(16 * c4, -c6 + 1); c10 <= min(16 * c4 + 15, c3 - c6 - 2); c10 += 1)
                                {
                                    for( c12 = c10 + 1; c12 < min(c3 - c6, c3 + c10 - 2); c12 += 1)
                                        V[(-c6)][(c3-c6)] = MIN(V[c10][c12] + EFL[(-c6)][(c3-c6)], V[(-c6)][(c3-c6)]);
                                    if (c3 >= 16 * c4 && 16 * c4 + 15 >= c3)
                                        W[(-c6)][(c3-c6)] += MIN ( MIN(W[(-c6)][c10], W[c10+1][(c3-c6)]), W[(-c6)][(c3-c6)]);
                                    V[(-c6)][(c3-c6)] = MIN(W[(-c6)+1][c10] + W[c10+1][(c3-c6)-1], V[(-c6)][(c3-c6)]);
                                }
                                if (N >= 16 * c1 + 17 && 16 * c1 + 32 >= N && 16 * c1 + 16 * c4 + 32 == N + c3 && N + c6 == 16 * c1 + 16)
                                    W[(N-16*c1-16)][(N-16*c1+c3-16)] += MIN ( MIN(W[(N-16*c1-16)][(N-16*c1+c3-17)], W[(N-16*c1+c3-17)+1][(N-16*c1+c3-16)]), W[(N-16*c1-16)][(N-16*c1+c3-16)]);
                                if (c3 >= 16 * c4 && 16 * c4 + 15 >= c3)
                                    for( c10 = 16 * c4 + 16; c10 < c3 - c6; c10 += 1)
                                        W[(-c6)][(c3-c6)] += MIN ( MIN(W[(-c6)][c10], W[c10+1][(c3-c6)]), W[(-c6)][(c3-c6)]);
                            }
                        }
                        if ((c3 >= 16 && 16 * c1 + 31 >= N + c3) || (N + c3 >= 16 * c1 + 32 && 16 * c1 + 15 >= ((15 * N + 15 * c3 + 15) % 16) + N))
                        {
                            int c4 = 16 * c1 + 30 >= N + c3 ? 0 : N - c1 + c3 - (15 * N + 15 * c3 + 15) / 16 - 1;
                            for( c6 = max(-N + 16 * c1 + 1, -N + c3 + 1); c6 <= 0; c6 += 1)
                                for( c10 = max(16 * c4, -c6 + 1); c10 <= min(16 * c4 + 15, c3 - c6 - 2); c10 += 1)
                                {
                                    for( c12 = c10 + 1; c12 < min(c3 - c6, c3 + c10 - 2); c12 += 1)
                                        V[(-c6)][(c3-c6)] = MIN(V[c10][c12] + EFL[(-c6)][(c3-c6)], V[(-c6)][(c3-c6)]);
                                    V[(-c6)][(c3-c6)] = MIN(W[(-c6)+1][c10] + W[c10+1][(c3-c6)-1], V[(-c6)][(c3-c6)]);
                                }
                        }
                    }
                    for( c4 = max(c3 / 16, -c1 + (N + c3) / 16 - 1); c4 <= min((N - 1) / 16, -c1 + (N + c3 - 1) / 16); c4 += 1)
                    {
                        if (16 * c4 >= c3 + 1)
                        {
                            for( c6 = max(max(-N + 16 * c1 + 1, -N + c3 + 1), -16 * c4 - 14); c6 < c3 - 16 * c4 - 15; c6 += 1)
                                for( c10 = max(16 * c4, -c6 + 1); c10 <= min(16 * c4 + 15, c3 - c6 - 2); c10 += 1)
                                {
                                    for( c12 = c10 + 1; c12 < min(c3 - c6, c3 + c10 - 2); c12 += 1)
                                        V[(-c6)][(c3-c6)] = MIN(V[c10][c12] + EFL[(-c6)][(c3-c6)], V[(-c6)][(c3-c6)]);
                                    V[(-c6)][(c3-c6)] = MIN(W[(-c6)+1][c10] + W[c10+1][(c3-c6)-1], V[(-c6)][(c3-c6)]);
                                }
                        }
                        else
                            for( c6 = max(-N + 16 * c1 + 1, -N + c3 + 1); c6 < c3 - 16 * c4 - 15; c6 += 1)
                                for( c10 = -c6 + 1; c10 < c3 - c6; c10 += 1)
                                {
                                    if (c10 >= 16 * c4 && 16 * c4 + 15 >= c10)
                                        for( c12 = c10 + 1; c12 < min(c3 - c6, c3 + c10 - 2); c12 += 1)
                                            V[(-c6)][(c3-c6)] = MIN(V[c10][c12] + EFL[(-c6)][(c3-c6)], V[(-c6)][(c3-c6)]);
                                    W[(-c6)][(c3-c6)] += MIN ( MIN(W[(-c6)][c10], W[c10+1][(c3-c6)]), W[(-c6)][(c3-c6)]);
                                    if (c3 >= c6 + c10 + 2 && c10 >= 16 * c4 && 16 * c4 + 15 >= c10)
                                        V[(-c6)][(c3-c6)] = MIN(W[(-c6)+1][c10] + W[c10+1][(c3-c6)-1], V[(-c6)][(c3-c6)]);
                                }
                        for( c6 = max(max(-N + 16 * c1 + 1, -N + c3 + 1), c3 - 16 * c4 - 15); c6 <= min(min(0, -N + 16 * c1 + 16), c3 - 16 * c4); c6 += 1)
                        {
                            if (c3 >= 3 && c3 >= 16 * c4 + c6 + 2)
                            {
                                if (c3 >= 16 * c4)
                                    for( c10 = -c6 + 1; c10 < 16 * c4; c10 += 1)
                                        W[(-c6)][(c3-c6)] += MIN ( MIN(W[(-c6)][c10], W[c10+1][(c3-c6)]), W[(-c6)][(c3-c6)]);
                                for( c10 = max(16 * c4, -c6 + 1); c10 < c3 - c6 - 1; c10 += 1)
                                {
                                    for( c12 = c10 + 1; c12 < min(c3 - c6, c3 + c10 - 2); c12 += 1)
                                        V[(-c6)][(c3-c6)] = MIN(V[c10][c12] + EFL[(-c6)][(c3-c6)], V[(-c6)][(c3-c6)]);
                                    if (c3 >= 16 * c4)
                                        W[(-c6)][(c3-c6)] += MIN ( MIN(W[(-c6)][c10], W[c10+1][(c3-c6)]), W[(-c6)][(c3-c6)]);
                                    V[(-c6)][(c3-c6)] = MIN(W[(-c6)+1][c10] + W[c10+1][(c3-c6)-1], V[(-c6)][(c3-c6)]);
                                }
                                if (c3 >= 16 * c4)
                                    W[(-c6)][(c3-c6)] += MIN ( MIN(W[(-c6)][(c3-c6-1)], W[(c3-c6-1)+1][(c3-c6)]), W[(-c6)][(c3-c6)]);
                            }
                            else if (c0 + 15 * c4 + 1 == c1 + c3 && 16 * c1 + c3 + 15 * c6 >= 16 * c0 + 1)
                            {
                                for( c10 = -c6 + 1; c10 < c3 - c6; c10 += 1)
                                    W[(-c6)][(c3-c6)] += MIN ( MIN(W[(-c6)][c10], W[c10+1][(c3-c6)]), W[(-c6)][(c3-c6)]);
                            }
                            else if (c1 == c0 && c3 == 2 && c4 == 0)
                                W[(-c6)][(-c6+2)] += MIN ( MIN(W[(-c6)][(-c6+1)], W[(-c6+1)+1][(-c6+2)]), W[(-c6)][(-c6+2)]);
                            V[(-c6)][(c3-c6)] = MIN( MIN (V[(-c6)+1][(c3-c6)-1], EHF[(-c6)][(c3-c6)]), V[(-c6)][(c3-c6)]);
                            W[(-c6)][(c3-c6)] = MIN( MIN ( MIN ( W[(-c6)+1][(c3-c6)], W[(-c6)][(c3-c6)-1]), V[(-c6)][(c3-c6)]), W[(-c6)][(c3-c6)]);
                        }
                    }
                }


    if(1==0)
        for( c0 = 1; c0 < N + floord(N - 2, 16); c0 += 1)
            #pragma omp parallel for schedule(dynamic, 1)
            for( c1 = c0 - (c0 + 16) / 17 + 1; c1 <= min(N - 1, c0); c1 += 1)
                for( c3 = 16 * c0 - 16 * c1 + 1; c3 <= min(c1, 16 * c0 - 16 * c1 + 16); c3 += 1)
                {
                    if (c3 >= 3 && (c3 % 16) + N >= c1 + c3 + 16)
                        for( c10 = N - c1; c10 < N - c1 + c3 - 1; c10 += 1)
                            W[(N-c1-1)][(N-c1+c3-1)] += MIN ( MIN(W[(N-c1-1)][c10], W[c10+1][(N-c1+c3-1)]), W[(N-c1-1)][(N-c1+c3-1)]);
                    if (c3 >= 3)
                        for( c4 = (N - c1) / 16; c4 <= (N - c1 + c3 - 3) / 16; c4 += 1)
                        {
                            if (c3 >= 16 * c4 && 16 * c4 + 15 >= c3)
                                for( c10 = N - c1; c10 < 16 * c4; c10 += 1)
                                    W[(N-c1-1)][(N-c1+c3-1)] += MIN ( MIN(W[(N-c1-1)][c10], W[c10+1][(N-c1+c3-1)]), W[(N-c1-1)][(N-c1+c3-1)]);
                            for( c10 = max(N - c1, 16 * c4); c10 <= min(N - c1 + c3 - 3, 16 * c4 + 15); c10 += 1)
                            {
                                for( c12 = c10 + 1; c12 < min(N - c1 + c3 - 1, c3 + c10 - 2); c12 += 1)
                                    V[(N-c1-1)][(N-c1+c3-1)] = MIN(V[c10][c12] + EFL[(N-c1-1)][(N-c1+c3-1)], V[(N-c1-1)][(N-c1+c3-1)]);
                                if (c3 >= 16 * c4 && 16 * c4 + 15 >= c3)
                                    W[(N-c1-1)][(N-c1+c3-1)] += MIN ( MIN(W[(N-c1-1)][c10], W[c10+1][(N-c1+c3-1)]), W[(N-c1-1)][(N-c1+c3-1)]);
                                V[(N-c1-1)][(N-c1+c3-1)] = MIN(W[(N-c1-1)+1][c10] + W[c10+1][(N-c1+c3-1)-1], V[(N-c1-1)][(N-c1+c3-1)]);
                            }
                            if (c3 >= 16 * c4 && 16 * c4 + 15 >= c3 && c1 + 16 * c4 + 17 >= N + c3)
                                W[(N-c1-1)][(N-c1+c3-1)] += MIN ( MIN(W[(N-c1-1)][(N-c1+c3-2)], W[(N-c1+c3-2)+1][(N-c1+c3-1)]), W[(N-c1-1)][(N-c1+c3-1)]);
                            if (c3 >= 16 * c4 && 16 * c4 + 15 >= c3)
                                for( c10 = 16 * c4 + 16; c10 < N - c1 + c3 - 1; c10 += 1)
                                    W[(N-c1-1)][(N-c1+c3-1)] += MIN ( MIN(W[(N-c1-1)][c10], W[c10+1][(N-c1+c3-1)]), W[(N-c1-1)][(N-c1+c3-1)]);
                        }
                    if (31 * c1 + c3 + 14 >= 15 * N + 16 * c0 && (c0 - c1 - c3 + 1) % 15 == 0)
                        for( c10 = N - c1; c10 < N - c1 + c3 - 1; c10 += 1)
                            W[(N-c1-1)][(N-c1+c3-1)] += MIN ( MIN(W[(N-c1-1)][c10], W[c10+1][(N-c1+c3-1)]), W[(N-c1-1)][(N-c1+c3-1)]);
                    if (c1 == c0 && c3 == 2)
                        W[(N-c0-1)][(N-c0+1)] += MIN ( MIN(W[(N-c0-1)][(N-c0)], W[(N-c0)+1][(N-c0+1)]), W[(N-c0-1)][(N-c0+1)]);
                    V[(N-c1-1)][(N-c1+c3-1)] = MIN( MIN (V[(N-c1-1)+1][(N-c1+c3-1)-1], EHF[(N-c1-1)][(N-c1+c3-1)]), V[(N-c1-1)][(N-c1+c3-1)]);
                    W[(N-c1-1)][(N-c1+c3-1)] = MIN( MIN ( MIN ( W[(N-c1-1)+1][(N-c1+c3-1)], W[(N-c1-1)][(N-c1+c3-1)-1]), V[(N-c1-1)][(N-c1+c3-1)]), W[(N-c1-1)][(N-c1+c3-1)]);
                }


    if(1==0)
        for( c0 = 0; c0 <= floord(N - 2, 16); c0 += 1)
            #pragma omp parallel for
            for( c1 = (c0 + 1) / 2; c1 <= min(c0, (N - 1) / 32); c1 += 1)
                for( c3 = 32 * c0 - 32 * c1 + 1; c3 <= min(min(N - 1, 32 * c1 + 31), 32 * c0 - 32 * c1 + 32); c3 += 1)
                {
                    if (c3 >= 3 && (c3 % 32) + N >= 32 * c1 + c3 + 63)
                    {
                        for( c6 = max(-N + 32 * c1 + 1, -N + c3 + 1); c6 <= -N + 32 * c1 + 32; c6 += 1)
                            for( c10 = -c6 + 1; c10 < c3 - c6; c10 += 1)
                                W[(-c6)][(c3-c6)] += MIN ( MIN(W[(-c6)][c10], W[c10+1][(c3-c6)]), W[(-c6)][(c3-c6)]);
                    }
                    else if (N >= 32 * c0 + 62 && c1 == c0 && c3 == 2)
                    {
                        for( c6 = max(-N + 3, -N + 32 * c0 + 1); c6 <= -N + 32 * c0 + 32; c6 += 1)
                            W[(-c6)][(-c6+2)] += MIN ( MIN(W[(-c6)][(-c6+1)], W[(-c6+1)+1][(-c6+2)]), W[(-c6)][(-c6+2)]);
                    }
                    if (c3 >= 3)
                    {
                        for( c4 = max(0, -c1 + (N + 1) / 32 - 1); c4 < -c1 + (N + c3) / 32 - 1; c4 += 1)
                        {
                            if (c3 >= 32 * c4 + 32)
                            {
                                for( c6 = max(max(-N + 32 * c1 + 1, -N + c3 + 1), -32 * c4 - 30); c6 <= min(0, -N + 32 * c1 + 32); c6 += 1)
                                    for( c10 = max(32 * c4, -c6 + 1); c10 <= min(32 * c4 + 31, c3 - c6 - 2); c10 += 1)
                                    {
                                        for( c12 = c10 + 1; c12 < min(c3 - c6, c3 + c10 - 2); c12 += 1)
                                            V[(-c6)][(c3-c6)] = MIN(V[c10][c12] + EFL[(-c6)][(c3-c6)], V[(-c6)][(c3-c6)]);
                                        V[(-c6)][(c3-c6)] = MIN(W[(-c6)+1][c10] + W[c10+1][(c3-c6)-1], V[(-c6)][(c3-c6)]);
                                    }
                            }
                            else if (32 * c4 >= c3 + 1)
                            {
                                for( c6 = max(max(-N + 32 * c1 + 1, -N + c3 + 1), -32 * c4 - 30); c6 <= -N + 32 * c1 + 32; c6 += 1)
                                    for( c10 = max(32 * c4, -c6 + 1); c10 <= min(32 * c4 + 31, c3 - c6 - 2); c10 += 1)
                                    {
                                        for( c12 = c10 + 1; c12 < min(c3 - c6, c3 + c10 - 2); c12 += 1)
                                            V[(-c6)][(c3-c6)] = MIN(V[c10][c12] + EFL[(-c6)][(c3-c6)], V[(-c6)][(c3-c6)]);
                                        V[(-c6)][(c3-c6)] = MIN(W[(-c6)+1][c10] + W[c10+1][(c3-c6)-1], V[(-c6)][(c3-c6)]);
                                    }
                            }
                            else
                            {
                                for( c6 = max(-N + 32 * c1 + 1, -N + c3 + 1); c6 <= -N + 32 * c1 + 32; c6 += 1)
                                    for( c10 = -c6 + 1; c10 < c3 - c6; c10 += 1)
                                    {
                                        if (c10 >= 32 * c4 && 32 * c4 + 31 >= c10)
                                            for( c12 = c10 + 1; c12 < min(c3 - c6, c3 + c10 - 2); c12 += 1)
                                                V[(-c6)][(c3-c6)] = MIN(V[c10][c12] + EFL[(-c6)][(c3-c6)], V[(-c6)][(c3-c6)]);
                                        W[(-c6)][(c3-c6)] += MIN ( MIN(W[(-c6)][c10], W[c10+1][(c3-c6)]), W[(-c6)][(c3-c6)]);
                                        if (c3 >= c6 + c10 + 2 && c10 >= 32 * c4 && 32 * c4 + 31 >= c10)
                                            V[(-c6)][(c3-c6)] = MIN(W[(-c6)+1][c10] + W[c10+1][(c3-c6)-1], V[(-c6)][(c3-c6)]);
                                    }
                            }
                        }
                        if ((c3 >= 32 && 32 * c1 + 63 >= N + c3) || (N + c3 >= 32 * c1 + 64 && 32 * c1 + 31 >= ((31 * N + 31 * c3 + 31) % 32) + N))
                        {
                            int c4 = 32 * c1 + 62 >= N + c3 ? 0 : N - c1 + c3 - (31 * N + 31 * c3 + 31) / 32 - 1;
                            for( c6 = max(-N + 32 * c1 + 1, -N + c3 + 1); c6 <= 0; c6 += 1)
                                for( c10 = max(32 * c4, -c6 + 1); c10 <= min(32 * c4 + 31, c3 - c6 - 2); c10 += 1)
                                {
                                    for( c12 = c10 + 1; c12 < min(c3 - c6, c3 + c10 - 2); c12 += 1)
                                        V[(-c6)][(c3-c6)] = MIN(V[c10][c12] + EFL[(-c6)][(c3-c6)], V[(-c6)][(c3-c6)]);
                                    V[(-c6)][(c3-c6)] = MIN(W[(-c6)+1][c10] + W[c10+1][(c3-c6)-1], V[(-c6)][(c3-c6)]);
                                }
                        }
                    }
                    for( c4 = max(c3 / 32, -c1 + (N + c3) / 32 - 1); c4 <= min((N - 1) / 32, -c1 + (N + c3 - 1) / 32); c4 += 1)
                    {
                        if (c1 == c0 && c3 >= 3 && c4 == 0)
                        {
                            for( c6 = max(-N + 32 * c0 + 1, -N + c3 + 1); c6 < -30; c6 += 1)
                                for( c10 = -c6 + 1; c10 < c3 - c6; c10 += 1)
                                    W[(-c6)][(c3-c6)] += MIN ( MIN(W[(-c6)][c10], W[c10+1][(c3-c6)]), W[(-c6)][(c3-c6)]);
                        }
                        else if (c1 == c0 && c3 == 2 && c4 == 0)
                        {
                            for( c6 = max(-N + 3, -N + 32 * c0 + 1); c6 < -29; c6 += 1)
                                W[(-c6)][(-c6+2)] += MIN ( MIN(W[(-c6)][(-c6+1)], W[(-c6+1)+1][(-c6+2)]), W[(-c6)][(-c6+2)]);
                        }
                        if (c3 >= 3)
                            for( c6 = max(max(-N + 32 * c1 + 1, -N + c3 + 1), -32 * c4 - 30); c6 < c3 - 32 * c4 - 31; c6 += 1)
                            {
                                if (32 * c4 >= c3 + 1)
                                {
                                    for( c10 = max(32 * c4, -c6 + 1); c10 <= min(32 * c4 + 31, c3 - c6 - 2); c10 += 1)
                                    {
                                        for( c12 = c10 + 1; c12 < min(c3 - c6, c3 + c10 - 2); c12 += 1)
                                            V[(-c6)][(c3-c6)] = MIN(V[c10][c12] + EFL[(-c6)][(c3-c6)], V[(-c6)][(c3-c6)]);
                                        V[(-c6)][(c3-c6)] = MIN(W[(-c6)+1][c10] + W[c10+1][(c3-c6)-1], V[(-c6)][(c3-c6)]);
                                    }
                                }
                                else
                                {
                                    for( c10 = -c6 + 1; c10 < c3 - c6; c10 += 1)
                                    {
                                        if (c10 >= 32 * c4 && 32 * c4 + 31 >= c10)
                                            for( c12 = c10 + 1; c12 < min(c3 - c6, c3 + c10 - 2); c12 += 1)
                                                V[(-c6)][(c3-c6)] = MIN(V[c10][c12] + EFL[(-c6)][(c3-c6)], V[(-c6)][(c3-c6)]);
                                        W[(-c6)][(c3-c6)] += MIN ( MIN(W[(-c6)][c10], W[c10+1][(c3-c6)]), W[(-c6)][(c3-c6)]);
                                        if (c3 >= c6 + c10 + 2 && c10 >= 32 * c4 && 32 * c4 + 31 >= c10)
                                            V[(-c6)][(c3-c6)] = MIN(W[(-c6)+1][c10] + W[c10+1][(c3-c6)-1], V[(-c6)][(c3-c6)]);
                                    }
                                }
                            }
                        for( c6 = max(max(-N + 32 * c1 + 1, -N + c3 + 1), c3 - 32 * c4 - 31); c6 <= min(min(0, -N + 32 * c1 + 32), c3 - 32 * c4); c6 += 1)
                        {
                            if (32 * c4 >= c3 + 1)
                            {
                                for( c10 = max(32 * c4, -c6 + 1); c10 < c3 - c6 - 1; c10 += 1)
                                {
                                    for( c12 = c10 + 1; c12 < min(c3 - c6, c3 + c10 - 2); c12 += 1)
                                        V[(-c6)][(c3-c6)] = MIN(V[c10][c12] + EFL[(-c6)][(c3-c6)], V[(-c6)][(c3-c6)]);
                                    V[(-c6)][(c3-c6)] = MIN(W[(-c6)+1][c10] + W[c10+1][(c3-c6)-1], V[(-c6)][(c3-c6)]);
                                }
                            }
                            else
                            {
                                for( c10 = -c6 + 1; c10 < c3 - c6; c10 += 1)
                                {
                                    if (c10 >= 32 * c4)
                                        for( c12 = c10 + 1; c12 < min(c3 - c6, c3 + c10 - 2); c12 += 1)
                                            V[(-c6)][(c3-c6)] = MIN(V[c10][c12] + EFL[(-c6)][(c3-c6)], V[(-c6)][(c3-c6)]);
                                    W[(-c6)][(c3-c6)] += MIN ( MIN(W[(-c6)][c10], W[c10+1][(c3-c6)]), W[(-c6)][(c3-c6)]);
                                    if (c3 >= c6 + c10 + 2 && c10 >= 32 * c4)
                                        V[(-c6)][(c3-c6)] = MIN(W[(-c6)+1][c10] + W[c10+1][(c3-c6)-1], V[(-c6)][(c3-c6)]);
                                }
                            }
                            V[(-c6)][(c3-c6)] = MIN( MIN (V[(-c6)+1][(c3-c6)-1], EHF[(-c6)][(c3-c6)]), V[(-c6)][(c3-c6)]);
                            W[(-c6)][(c3-c6)] = MIN( MIN ( MIN ( W[(-c6)+1][(c3-c6)], W[(-c6)][(c3-c6)-1]), V[(-c6)][(c3-c6)]), W[(-c6)][(c3-c6)]);
                        }
                    }
                }
    if(1==0)
        for( c0 = 0; c0 <= floord(N - 2, 16); c0 += 1)
            #pragma omp parallel for schedule(dynamic, 1)
            for( c1 = (c0 + 1) / 2; c1 <= min(c0, (N - 1) / 32); c1 += 1)
                for( c3 = 32 * c0 - 32 * c1 + 1; c3 <= min(min(N - 1, 32 * c1 + 31), 32 * c0 - 32 * c1 + 32); c3 += 1)
                {
                    if (c3 >= 3)
                    {
                        if ((c3 % 32) + N >= 32 * c1 + c3 + 63)
                            for( c6 = max(-N + 32 * c1 + 1, -N + c3 + 1); c6 <= -N + 32 * c1 + 32; c6 += 1)
                                for( c10 = -c6 + 1; c10 < c3 - c6; c10 += 1)
                                    W[(-c6)][(c3-c6)] += MIN ( MIN(W[(-c6)][c10], W[c10+1][(c3-c6)]), W[(-c6)][(c3-c6)]);
                        for( c4 = max(0, -c1 + (N + 1) / 32 - 1); c4 <= min((N - 3) / 32, -c1 + (N + c3 - 3) / 32); c4 += 1)
                        {
                            if (c3 >= 32 * c4 && 32 * c4 + 31 >= c3)
                                for( c6 = max(-N + 32 * c1 + 1, -N + c3 + 1); c6 < -32 * c4 - 30; c6 += 1)
                                    for( c10 = -c6 + 1; c10 < c3 - c6; c10 += 1)
                                        W[(-c6)][(c3-c6)] += MIN ( MIN(W[(-c6)][c10], W[c10+1][(c3-c6)]), W[(-c6)][(c3-c6)]);
                            for( c6 = max(max(-N + 32 * c1 + 1, -N + c3 + 1), -32 * c4 - 30); c6 <= min(min(0, -N + 32 * c1 + 32), c3 - 32 * c4); c6 += 1)
                            {
                                if (c3 >= 32 * c4 + c6 + 2)
                                {
                                    if (c3 >= 32 * c4 && 32 * c4 + 31 >= c3)
                                        for( c10 = -c6 + 1; c10 < 32 * c4; c10 += 1)
                                            W[(-c6)][(c3-c6)] += MIN ( MIN(W[(-c6)][c10], W[c10+1][(c3-c6)]), W[(-c6)][(c3-c6)]);
                                    for( c10 = max(32 * c4, -c6 + 1); c10 <= min(32 * c4 + 31, c3 - c6 - 2); c10 += 1)
                                    {
                                        for( c12 = c10 + 1; c12 < min(c3 - c6, c3 + c10 - 2); c12 += 1)
                                            V[(-c6)][(c3-c6)] = MIN(V[c10][c12] + EFL[(-c6)][(c3-c6)], V[(-c6)][(c3-c6)]);
                                        if (c3 >= 32 * c4 && 32 * c4 + 31 >= c3)
                                            W[(-c6)][(c3-c6)] += MIN ( MIN(W[(-c6)][c10], W[c10+1][(c3-c6)]), W[(-c6)][(c3-c6)]);
                                        V[(-c6)][(c3-c6)] = MIN(W[(-c6)+1][c10] + W[c10+1][(c3-c6)-1], V[(-c6)][(c3-c6)]);
                                    }
                                    if (c3 >= 32 * c4 && 32 * c4 + 31 >= c3 && 32 * c4 + c6 + 32 >= c3)
                                        W[(-c6)][(c3-c6)] += MIN ( MIN(W[(-c6)][(c3-c6-1)], W[(c3-c6-1)+1][(c3-c6)]), W[(-c6)][(c3-c6)]);
                                    if (c3 >= 32 * c4 && 32 * c4 + 31 >= c3)
                                        for( c10 = 32 * c4 + 32; c10 < c3 - c6; c10 += 1)
                                            W[(-c6)][(c3-c6)] += MIN ( MIN(W[(-c6)][c10], W[c10+1][(c3-c6)]), W[(-c6)][(c3-c6)]);
                                }
                                else if (c0 + 31 * c4 + 1 == c1 + c3)
                                {
                                    for( c10 = -c6 + 1; c10 < c3 - c6; c10 += 1)
                                        W[(-c6)][(c3-c6)] += MIN ( MIN(W[(-c6)][c10], W[c10+1][(c3-c6)]), W[(-c6)][(c3-c6)]);
                                }
                                if (32 * c4 + c6 + 31 >= c3)
                                {
                                    V[(-c6)][(c3-c6)] = MIN( MIN (V[(-c6)+1][(c3-c6)-1], EHF[(-c6)][(c3-c6)]), V[(-c6)][(c3-c6)]);
                                    W[(-c6)][(c3-c6)] = MIN( MIN ( MIN ( W[(-c6)+1][(c3-c6)], W[(-c6)][(c3-c6)-1]), V[(-c6)][(c3-c6)]), W[(-c6)][(c3-c6)]);
                                }
                            }
                        }
                        if (2 * c1 == c0 && ((N - 3) % 32) + c3 >= 16 * c0 + 32 && (N - 3) % 32 >= 30 && N + 28 >= ((N - 3) % 32) + c3)
                            for( c6 = -N + c3 + 1; c6 <= min(-N + 16 * c0 + 32, ((N - 1) % 32) - N + c3 + 1); c6 += 1)
                            {
                                V[(-c6)][(c3-c6)] = MIN( MIN (V[(-c6)+1][(c3-c6)-1], EHF[(-c6)][(c3-c6)]), V[(-c6)][(c3-c6)]);
                                W[(-c6)][(c3-c6)] = MIN( MIN ( MIN ( W[(-c6)+1][(c3-c6)], W[(-c6)][(c3-c6)-1]), V[(-c6)][(c3-c6)]), W[(-c6)][(c3-c6)]);
                            }
                        if ((N + c3 - 3) % 32 >= 30 && N + 28 >= ((N + c3 - 3) % 32) + 32 * c1)
                        {
                            for( c6 = max(-N + 32 * c1 + 1, -N + c3 + 1); c6 <= ((N + c3 - 1) % 32) - N + 32 * c1 + 1; c6 += 1)
                            {
                                V[(-c6)][(c3-c6)] = MIN( MIN (V[(-c6)+1][(c3-c6)-1], EHF[(-c6)][(c3-c6)]), V[(-c6)][(c3-c6)]);
                                W[(-c6)][(c3-c6)] = MIN( MIN ( MIN ( W[(-c6)+1][(c3-c6)], W[(-c6)][(c3-c6)-1]), V[(-c6)][(c3-c6)]), W[(-c6)][(c3-c6)]);
                            }
                        }
                        else if (16 * c0 + 2 == N && 32 * c1 + 2 == N && c3 + 1 == N)
                        {
                            for( c10 = 1; c10 < N - 1; c10 += 1)
                                W[0][(N-1)] += MIN ( MIN(W[0][c10], W[c10+1][(N-1)]), W[0][(N-1)]);
                            V[0][(N-1)] = MIN( MIN (V[0+1][(N-1)-1], EHF[0][(N-1)]), V[0][(N-1)]);
                            W[0][(N-1)] = MIN( MIN ( MIN ( W[0+1][(N-1)], W[0][(N-1)-1]), V[0][(N-1)]), W[0][(N-1)]);
                        }
                        else if (1024 * c1 + c3 + 30 >= 31 * N + 32 * c0 && (c0 - c1 - c3 + 1) % 31 == 0)
                        {
                            for( c6 = -N + 32 * c1 + 1; c6 <= 0; c6 += 1)
                            {
                                for( c10 = -c6 + 1; c10 < c3 - c6; c10 += 1)
                                    W[(-c6)][(c3-c6)] += MIN ( MIN(W[(-c6)][c10], W[c10+1][(c3-c6)]), W[(-c6)][(c3-c6)]);
                                V[(-c6)][(c3-c6)] = MIN( MIN (V[(-c6)+1][(c3-c6)-1], EHF[(-c6)][(c3-c6)]), V[(-c6)][(c3-c6)]);
                                W[(-c6)][(c3-c6)] = MIN( MIN ( MIN ( W[(-c6)+1][(c3-c6)], W[(-c6)][(c3-c6)-1]), V[(-c6)][(c3-c6)]), W[(-c6)][(c3-c6)]);
                            }
                        }
                    }
                    else
                    {
                        if (c3 == 1)
                        {
                            for( c6 = max(max(-30, -N + 2), -N + 32 * c0 + 1); c6 <= min(0, -N + 32 * c0 + 32); c6 += 1)
                            {
                                V[(-c6)][(-c6+1)] = MIN( MIN (V[(-c6)+1][(-c6+1)-1], EHF[(-c6)][(-c6+1)]), V[(-c6)][(-c6+1)]);
                                W[(-c6)][(-c6+1)] = MIN( MIN ( MIN ( W[(-c6)+1][(-c6+1)], W[(-c6)][(-c6+1)-1]), V[(-c6)][(-c6+1)]), W[(-c6)][(-c6+1)]);
                            }
                        }
                        else
                        {
                            for( c6 = max(-N + 3, -N + 32 * c0 + 1); c6 <= min(0, -N + 32 * c0 + 32); c6 += 1)
                            {
                                W[(-c6)][(-c6+2)] += MIN ( MIN(W[(-c6)][(-c6+1)], W[(-c6+1)+1][(-c6+2)]), W[(-c6)][(-c6+2)]);
                                if (c6 >= -29)
                                {
                                    V[(-c6)][(-c6+2)] = MIN( MIN (V[(-c6)+1][(-c6+2)-1], EHF[(-c6)][(-c6+2)]), V[(-c6)][(-c6+2)]);
                                    W[(-c6)][(-c6+2)] = MIN( MIN ( MIN ( W[(-c6)+1][(-c6+2)], W[(-c6)][(-c6+2)-1]), V[(-c6)][(-c6+2)]), W[(-c6)][(-c6+2)]);
                                }
                            }
                        }
                        for( c4 = max(1, -c0 + (N + c3) / 32 - 1); c4 <= min((N - 1) / 32, -c0 + (N + c3 - 1) / 32); c4 += 1)
                            for( c6 = max(max(-N + 32 * c0 + 1, -N + c3 + 1), c3 - 32 * c4 - 31); c6 <= min(-N + 32 * c0 + 32, c3 - 32 * c4); c6 += 1)
                            {
                                V[(-c6)][(c3-c6)] = MIN( MIN (V[(-c6)+1][(c3-c6)-1], EHF[(-c6)][(c3-c6)]), V[(-c6)][(c3-c6)]);
                                W[(-c6)][(c3-c6)] = MIN( MIN ( MIN ( W[(-c6)+1][(c3-c6)], W[(-c6)][(c3-c6)-1]), V[(-c6)][(c3-c6)]), W[(-c6)][(c3-c6)]);
                            }
                    }
                }



}
